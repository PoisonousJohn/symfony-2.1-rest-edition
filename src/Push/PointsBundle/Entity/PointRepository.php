<?php

namespace Push\PointsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\DBAL\Types\Type;

/**
 * PointRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointRepository extends EntityRepository
{
    public function getNearestPoints($lat, $lng)
    {
        $rsm = new ResultSetMapping;
//
        $rsm->addEntityResult('Push\PointsBundle\Entity\Point', 'P');
//        $rsm->addJoinedEntityResult('Application\Sonata\MediaBundle\Entity\Media', 'I', 'P', 'image');
        $rsm->addFieldResult('P', 'id', 'id');
//        $rsm->addFieldResult('P', 'name', 'name');
//        $rsm->addFieldResult('P', 'latitude', 'latitude');
//        $rsm->addFieldResult('P', 'longitude', 'longitude');
//        $rsm->addFieldResult('P', 'startTime', 'startTime');
//        $rsm->addFieldResult('P', 'endTime', 'endTime');
//        $rsm->addFieldResult('P', 'allDay', 'allDay');
//        $rsm->addFieldResult('P', 'description', 'description');
//        $rsm->addFieldResult('I', 'image_id', 'id');
////        $rsm->addFieldResult('P', 'imageHd', 'imageHd');
//        $rsm->addFieldResult('P', 'radius', 'radius');



        $query = $this->_em->createNativeQuery(
            "SELECT P.*
             FROM point P INNER JOIN (
                 SELECT pp.id,
                             ( 3959 * acos( cos( radians(:lat) ) * cos( radians( cast(pp.latitude as double precision) ) ) *
                             cos( radians( cast(pp.longitude as double precision) ) - radians(:lng) ) + sin( radians(:lat) ) *
                             sin( radians( cast(pp.latitude as double precision) ) ) ) * 1.609344 * 1000) AS distance
                 FROM point PP ) T ON (P.id = T.id)
             LEFT JOIN
                media I ON P.image_id = I.id
             WHERE T.distance <= P.radius  OR T.distance = 'NaN'
             ORDER BY T.distance ASC
             LIMIT 1", $rsm
        );

        $query->setParameter('lat', $lat, Type::FLOAT);
        $query->setParameter('lng', $lng, Type::FLOAT);
//        $query->setParameter('hours', date('H:i:s'), Type::STRING);

//        $query->setParameter('distance', $distance, Type::INTEGER);

        try {
            $result = $query->getSingleResult();
            if ($result) {
                $this->getEntityManager()->clear($this->getEntityName());
                return $this->getEntityManager()->getRepository($this->getEntityName())->find($result->getId());
            } else {
                return null;
            }
        } catch (\Doctrine\Orm\NoResultException $e) {
            return null;
        }
    }

}
